// Generated by gencpp from file ugv_msgs/toGUI.msg
// DO NOT EDIT!


#ifndef UGV_MSGS_MESSAGE_TOGUI_H
#define UGV_MSGS_MESSAGE_TOGUI_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace ugv_msgs
{
template <class ContainerAllocator>
struct toGUI_
{
  typedef toGUI_<ContainerAllocator> Type;

  toGUI_()
    : lat_postion(0.0)
    , lng_postion(0.0)
    , x(0.0)
    , y(0.0)
    , set_speed(0.0)
    , speed_left(0.0)
    , speed_right(0.0)
    , yaw(0.0)
    , set_steering(0.0)
    , steering(0.0)
    , num_mpc_refpath(0)
    , x_mpc_repath()
    , y_mpc_repath()
    , yaw_mpc_repath()  {
      x_mpc_repath.assign(0.0);

      y_mpc_repath.assign(0.0);

      yaw_mpc_repath.assign(0.0);
  }
  toGUI_(const ContainerAllocator& _alloc)
    : lat_postion(0.0)
    , lng_postion(0.0)
    , x(0.0)
    , y(0.0)
    , set_speed(0.0)
    , speed_left(0.0)
    , speed_right(0.0)
    , yaw(0.0)
    , set_steering(0.0)
    , steering(0.0)
    , num_mpc_refpath(0)
    , x_mpc_repath()
    , y_mpc_repath()
    , yaw_mpc_repath()  {
  (void)_alloc;
      x_mpc_repath.assign(0.0);

      y_mpc_repath.assign(0.0);

      yaw_mpc_repath.assign(0.0);
  }



   typedef double _lat_postion_type;
  _lat_postion_type lat_postion;

   typedef double _lng_postion_type;
  _lng_postion_type lng_postion;

   typedef float _x_type;
  _x_type x;

   typedef float _y_type;
  _y_type y;

   typedef float _set_speed_type;
  _set_speed_type set_speed;

   typedef float _speed_left_type;
  _speed_left_type speed_left;

   typedef float _speed_right_type;
  _speed_right_type speed_right;

   typedef float _yaw_type;
  _yaw_type yaw;

   typedef float _set_steering_type;
  _set_steering_type set_steering;

   typedef float _steering_type;
  _steering_type steering;

   typedef int8_t _num_mpc_refpath_type;
  _num_mpc_refpath_type num_mpc_refpath;

   typedef boost::array<float, 20>  _x_mpc_repath_type;
  _x_mpc_repath_type x_mpc_repath;

   typedef boost::array<float, 20>  _y_mpc_repath_type;
  _y_mpc_repath_type y_mpc_repath;

   typedef boost::array<float, 20>  _yaw_mpc_repath_type;
  _yaw_mpc_repath_type yaw_mpc_repath;





  typedef boost::shared_ptr< ::ugv_msgs::toGUI_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::ugv_msgs::toGUI_<ContainerAllocator> const> ConstPtr;

}; // struct toGUI_

typedef ::ugv_msgs::toGUI_<std::allocator<void> > toGUI;

typedef boost::shared_ptr< ::ugv_msgs::toGUI > toGUIPtr;
typedef boost::shared_ptr< ::ugv_msgs::toGUI const> toGUIConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::ugv_msgs::toGUI_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::ugv_msgs::toGUI_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::ugv_msgs::toGUI_<ContainerAllocator1> & lhs, const ::ugv_msgs::toGUI_<ContainerAllocator2> & rhs)
{
  return lhs.lat_postion == rhs.lat_postion &&
    lhs.lng_postion == rhs.lng_postion &&
    lhs.x == rhs.x &&
    lhs.y == rhs.y &&
    lhs.set_speed == rhs.set_speed &&
    lhs.speed_left == rhs.speed_left &&
    lhs.speed_right == rhs.speed_right &&
    lhs.yaw == rhs.yaw &&
    lhs.set_steering == rhs.set_steering &&
    lhs.steering == rhs.steering &&
    lhs.num_mpc_refpath == rhs.num_mpc_refpath &&
    lhs.x_mpc_repath == rhs.x_mpc_repath &&
    lhs.y_mpc_repath == rhs.y_mpc_repath &&
    lhs.yaw_mpc_repath == rhs.yaw_mpc_repath;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::ugv_msgs::toGUI_<ContainerAllocator1> & lhs, const ::ugv_msgs::toGUI_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace ugv_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::ugv_msgs::toGUI_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::ugv_msgs::toGUI_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::ugv_msgs::toGUI_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::ugv_msgs::toGUI_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::ugv_msgs::toGUI_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::ugv_msgs::toGUI_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::ugv_msgs::toGUI_<ContainerAllocator> >
{
  static const char* value()
  {
    return "4a28929b5edb2cd02f7ac9cd5152eccc";
  }

  static const char* value(const ::ugv_msgs::toGUI_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x4a28929b5edb2cd0ULL;
  static const uint64_t static_value2 = 0x2f7ac9cd5152ecccULL;
};

template<class ContainerAllocator>
struct DataType< ::ugv_msgs::toGUI_<ContainerAllocator> >
{
  static const char* value()
  {
    return "ugv_msgs/toGUI";
  }

  static const char* value(const ::ugv_msgs::toGUI_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::ugv_msgs::toGUI_<ContainerAllocator> >
{
  static const char* value()
  {
    return "#GPS Data \n"
"float64 lat_postion\n"
"float64 lng_postion\n"
"float32 x\n"
"float32 y\n"
"float32 set_speed\n"
"float32 speed_left\n"
"float32 speed_right\n"
"\n"
"#IMU Data \n"
"#float32 roll\n"
"#float32 pitch\n"
"float32 yaw\n"
"\n"
"#Controll Data\n"
"float32 set_steering\n"
"float32 steering\n"
"int8 num_mpc_refpath\n"
"float32[20] x_mpc_repath\n"
"float32[20] y_mpc_repath\n"
"float32[20] yaw_mpc_repath\n"
;
  }

  static const char* value(const ::ugv_msgs::toGUI_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::ugv_msgs::toGUI_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.lat_postion);
      stream.next(m.lng_postion);
      stream.next(m.x);
      stream.next(m.y);
      stream.next(m.set_speed);
      stream.next(m.speed_left);
      stream.next(m.speed_right);
      stream.next(m.yaw);
      stream.next(m.set_steering);
      stream.next(m.steering);
      stream.next(m.num_mpc_refpath);
      stream.next(m.x_mpc_repath);
      stream.next(m.y_mpc_repath);
      stream.next(m.yaw_mpc_repath);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct toGUI_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::ugv_msgs::toGUI_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::ugv_msgs::toGUI_<ContainerAllocator>& v)
  {
    s << indent << "lat_postion: ";
    Printer<double>::stream(s, indent + "  ", v.lat_postion);
    s << indent << "lng_postion: ";
    Printer<double>::stream(s, indent + "  ", v.lng_postion);
    s << indent << "x: ";
    Printer<float>::stream(s, indent + "  ", v.x);
    s << indent << "y: ";
    Printer<float>::stream(s, indent + "  ", v.y);
    s << indent << "set_speed: ";
    Printer<float>::stream(s, indent + "  ", v.set_speed);
    s << indent << "speed_left: ";
    Printer<float>::stream(s, indent + "  ", v.speed_left);
    s << indent << "speed_right: ";
    Printer<float>::stream(s, indent + "  ", v.speed_right);
    s << indent << "yaw: ";
    Printer<float>::stream(s, indent + "  ", v.yaw);
    s << indent << "set_steering: ";
    Printer<float>::stream(s, indent + "  ", v.set_steering);
    s << indent << "steering: ";
    Printer<float>::stream(s, indent + "  ", v.steering);
    s << indent << "num_mpc_refpath: ";
    Printer<int8_t>::stream(s, indent + "  ", v.num_mpc_refpath);
    s << indent << "x_mpc_repath[]" << std::endl;
    for (size_t i = 0; i < v.x_mpc_repath.size(); ++i)
    {
      s << indent << "  x_mpc_repath[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.x_mpc_repath[i]);
    }
    s << indent << "y_mpc_repath[]" << std::endl;
    for (size_t i = 0; i < v.y_mpc_repath.size(); ++i)
    {
      s << indent << "  y_mpc_repath[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.y_mpc_repath[i]);
    }
    s << indent << "yaw_mpc_repath[]" << std::endl;
    for (size_t i = 0; i < v.yaw_mpc_repath.size(); ++i)
    {
      s << indent << "  yaw_mpc_repath[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.yaw_mpc_repath[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // UGV_MSGS_MESSAGE_TOGUI_H
