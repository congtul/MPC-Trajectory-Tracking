# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from ugv_msgs/toUGV.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class toUGV(genpy.Message):
  _md5sum = "1efb4b5a89c87d8d3553438208941e46"
  _type = "ugv_msgs/toUGV"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """#0: update PID, 1: manual, 2: MPC, 3: LQR
uint8 mode
uint8 start_mode
uint8 send_parameters

#Parameters for PID
float64 Kp_steering
float64 Ki_steering 
float64 Kd_steering
float64 Kp_speed
float64 Ki_speed 
float64 Kd_speed

# Parameters for manual
float64 set_speed
float64 set_angle

# Parameters for MPC
float64 mpc_L_wheel
int8 mpc_Np
int8 mpc_Nc
float64[3] mpc_Q
float64[3] mpc_Qp
float64 mpc_R
float64 mpc_umax
float64 mpc_umin
int8 refpoint_offset

#Parameters for LQR
float64 lqr_L_wheel
int8 lqr_Np
float64[3] lqr_Q
float64[3] lqr_K
float64 lqr_R
float64 lqr_umax
float64 lqr_umin

int8 TrajectoryType #Line = 0

int8 numWaypoint   # number of waypoint except for base waypoint
float64 lat_base
float64 lng_base
float64[40] X_point
float64[40] Y_point
"""
  __slots__ = ['mode','start_mode','send_parameters','Kp_steering','Ki_steering','Kd_steering','Kp_speed','Ki_speed','Kd_speed','set_speed','set_angle','mpc_L_wheel','mpc_Np','mpc_Nc','mpc_Q','mpc_Qp','mpc_R','mpc_umax','mpc_umin','refpoint_offset','lqr_L_wheel','lqr_Np','lqr_Q','lqr_K','lqr_R','lqr_umax','lqr_umin','TrajectoryType','numWaypoint','lat_base','lng_base','X_point','Y_point']
  _slot_types = ['uint8','uint8','uint8','float64','float64','float64','float64','float64','float64','float64','float64','float64','int8','int8','float64[3]','float64[3]','float64','float64','float64','int8','float64','int8','float64[3]','float64[3]','float64','float64','float64','int8','int8','float64','float64','float64[40]','float64[40]']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       mode,start_mode,send_parameters,Kp_steering,Ki_steering,Kd_steering,Kp_speed,Ki_speed,Kd_speed,set_speed,set_angle,mpc_L_wheel,mpc_Np,mpc_Nc,mpc_Q,mpc_Qp,mpc_R,mpc_umax,mpc_umin,refpoint_offset,lqr_L_wheel,lqr_Np,lqr_Q,lqr_K,lqr_R,lqr_umax,lqr_umin,TrajectoryType,numWaypoint,lat_base,lng_base,X_point,Y_point

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(toUGV, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.mode is None:
        self.mode = 0
      if self.start_mode is None:
        self.start_mode = 0
      if self.send_parameters is None:
        self.send_parameters = 0
      if self.Kp_steering is None:
        self.Kp_steering = 0.
      if self.Ki_steering is None:
        self.Ki_steering = 0.
      if self.Kd_steering is None:
        self.Kd_steering = 0.
      if self.Kp_speed is None:
        self.Kp_speed = 0.
      if self.Ki_speed is None:
        self.Ki_speed = 0.
      if self.Kd_speed is None:
        self.Kd_speed = 0.
      if self.set_speed is None:
        self.set_speed = 0.
      if self.set_angle is None:
        self.set_angle = 0.
      if self.mpc_L_wheel is None:
        self.mpc_L_wheel = 0.
      if self.mpc_Np is None:
        self.mpc_Np = 0
      if self.mpc_Nc is None:
        self.mpc_Nc = 0
      if self.mpc_Q is None:
        self.mpc_Q = [0.] * 3
      if self.mpc_Qp is None:
        self.mpc_Qp = [0.] * 3
      if self.mpc_R is None:
        self.mpc_R = 0.
      if self.mpc_umax is None:
        self.mpc_umax = 0.
      if self.mpc_umin is None:
        self.mpc_umin = 0.
      if self.refpoint_offset is None:
        self.refpoint_offset = 0
      if self.lqr_L_wheel is None:
        self.lqr_L_wheel = 0.
      if self.lqr_Np is None:
        self.lqr_Np = 0
      if self.lqr_Q is None:
        self.lqr_Q = [0.] * 3
      if self.lqr_K is None:
        self.lqr_K = [0.] * 3
      if self.lqr_R is None:
        self.lqr_R = 0.
      if self.lqr_umax is None:
        self.lqr_umax = 0.
      if self.lqr_umin is None:
        self.lqr_umin = 0.
      if self.TrajectoryType is None:
        self.TrajectoryType = 0
      if self.numWaypoint is None:
        self.numWaypoint = 0
      if self.lat_base is None:
        self.lat_base = 0.
      if self.lng_base is None:
        self.lng_base = 0.
      if self.X_point is None:
        self.X_point = [0.] * 40
      if self.Y_point is None:
        self.Y_point = [0.] * 40
    else:
      self.mode = 0
      self.start_mode = 0
      self.send_parameters = 0
      self.Kp_steering = 0.
      self.Ki_steering = 0.
      self.Kd_steering = 0.
      self.Kp_speed = 0.
      self.Ki_speed = 0.
      self.Kd_speed = 0.
      self.set_speed = 0.
      self.set_angle = 0.
      self.mpc_L_wheel = 0.
      self.mpc_Np = 0
      self.mpc_Nc = 0
      self.mpc_Q = [0.] * 3
      self.mpc_Qp = [0.] * 3
      self.mpc_R = 0.
      self.mpc_umax = 0.
      self.mpc_umin = 0.
      self.refpoint_offset = 0
      self.lqr_L_wheel = 0.
      self.lqr_Np = 0
      self.lqr_Q = [0.] * 3
      self.lqr_K = [0.] * 3
      self.lqr_R = 0.
      self.lqr_umax = 0.
      self.lqr_umin = 0.
      self.TrajectoryType = 0
      self.numWaypoint = 0
      self.lat_base = 0.
      self.lng_base = 0.
      self.X_point = [0.] * 40
      self.Y_point = [0.] * 40

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_3B9d2b().pack(_x.mode, _x.start_mode, _x.send_parameters, _x.Kp_steering, _x.Ki_steering, _x.Kd_steering, _x.Kp_speed, _x.Ki_speed, _x.Kd_speed, _x.set_speed, _x.set_angle, _x.mpc_L_wheel, _x.mpc_Np, _x.mpc_Nc))
      buff.write(_get_struct_3d().pack(*self.mpc_Q))
      buff.write(_get_struct_3d().pack(*self.mpc_Qp))
      _x = self
      buff.write(_get_struct_3dbdb().pack(_x.mpc_R, _x.mpc_umax, _x.mpc_umin, _x.refpoint_offset, _x.lqr_L_wheel, _x.lqr_Np))
      buff.write(_get_struct_3d().pack(*self.lqr_Q))
      buff.write(_get_struct_3d().pack(*self.lqr_K))
      _x = self
      buff.write(_get_struct_3d2b2d().pack(_x.lqr_R, _x.lqr_umax, _x.lqr_umin, _x.TrajectoryType, _x.numWaypoint, _x.lat_base, _x.lng_base))
      buff.write(_get_struct_40d().pack(*self.X_point))
      buff.write(_get_struct_40d().pack(*self.Y_point))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      _x = self
      start = end
      end += 77
      (_x.mode, _x.start_mode, _x.send_parameters, _x.Kp_steering, _x.Ki_steering, _x.Kd_steering, _x.Kp_speed, _x.Ki_speed, _x.Kd_speed, _x.set_speed, _x.set_angle, _x.mpc_L_wheel, _x.mpc_Np, _x.mpc_Nc,) = _get_struct_3B9d2b().unpack(str[start:end])
      start = end
      end += 24
      self.mpc_Q = _get_struct_3d().unpack(str[start:end])
      start = end
      end += 24
      self.mpc_Qp = _get_struct_3d().unpack(str[start:end])
      _x = self
      start = end
      end += 34
      (_x.mpc_R, _x.mpc_umax, _x.mpc_umin, _x.refpoint_offset, _x.lqr_L_wheel, _x.lqr_Np,) = _get_struct_3dbdb().unpack(str[start:end])
      start = end
      end += 24
      self.lqr_Q = _get_struct_3d().unpack(str[start:end])
      start = end
      end += 24
      self.lqr_K = _get_struct_3d().unpack(str[start:end])
      _x = self
      start = end
      end += 42
      (_x.lqr_R, _x.lqr_umax, _x.lqr_umin, _x.TrajectoryType, _x.numWaypoint, _x.lat_base, _x.lng_base,) = _get_struct_3d2b2d().unpack(str[start:end])
      start = end
      end += 320
      self.X_point = _get_struct_40d().unpack(str[start:end])
      start = end
      end += 320
      self.Y_point = _get_struct_40d().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_3B9d2b().pack(_x.mode, _x.start_mode, _x.send_parameters, _x.Kp_steering, _x.Ki_steering, _x.Kd_steering, _x.Kp_speed, _x.Ki_speed, _x.Kd_speed, _x.set_speed, _x.set_angle, _x.mpc_L_wheel, _x.mpc_Np, _x.mpc_Nc))
      buff.write(self.mpc_Q.tostring())
      buff.write(self.mpc_Qp.tostring())
      _x = self
      buff.write(_get_struct_3dbdb().pack(_x.mpc_R, _x.mpc_umax, _x.mpc_umin, _x.refpoint_offset, _x.lqr_L_wheel, _x.lqr_Np))
      buff.write(self.lqr_Q.tostring())
      buff.write(self.lqr_K.tostring())
      _x = self
      buff.write(_get_struct_3d2b2d().pack(_x.lqr_R, _x.lqr_umax, _x.lqr_umin, _x.TrajectoryType, _x.numWaypoint, _x.lat_base, _x.lng_base))
      buff.write(self.X_point.tostring())
      buff.write(self.Y_point.tostring())
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      _x = self
      start = end
      end += 77
      (_x.mode, _x.start_mode, _x.send_parameters, _x.Kp_steering, _x.Ki_steering, _x.Kd_steering, _x.Kp_speed, _x.Ki_speed, _x.Kd_speed, _x.set_speed, _x.set_angle, _x.mpc_L_wheel, _x.mpc_Np, _x.mpc_Nc,) = _get_struct_3B9d2b().unpack(str[start:end])
      start = end
      end += 24
      self.mpc_Q = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=3)
      start = end
      end += 24
      self.mpc_Qp = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=3)
      _x = self
      start = end
      end += 34
      (_x.mpc_R, _x.mpc_umax, _x.mpc_umin, _x.refpoint_offset, _x.lqr_L_wheel, _x.lqr_Np,) = _get_struct_3dbdb().unpack(str[start:end])
      start = end
      end += 24
      self.lqr_Q = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=3)
      start = end
      end += 24
      self.lqr_K = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=3)
      _x = self
      start = end
      end += 42
      (_x.lqr_R, _x.lqr_umax, _x.lqr_umin, _x.TrajectoryType, _x.numWaypoint, _x.lat_base, _x.lng_base,) = _get_struct_3d2b2d().unpack(str[start:end])
      start = end
      end += 320
      self.X_point = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=40)
      start = end
      end += 320
      self.Y_point = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=40)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_3B9d2b = None
def _get_struct_3B9d2b():
    global _struct_3B9d2b
    if _struct_3B9d2b is None:
        _struct_3B9d2b = struct.Struct("<3B9d2b")
    return _struct_3B9d2b
_struct_3d = None
def _get_struct_3d():
    global _struct_3d
    if _struct_3d is None:
        _struct_3d = struct.Struct("<3d")
    return _struct_3d
_struct_3d2b2d = None
def _get_struct_3d2b2d():
    global _struct_3d2b2d
    if _struct_3d2b2d is None:
        _struct_3d2b2d = struct.Struct("<3d2b2d")
    return _struct_3d2b2d
_struct_3dbdb = None
def _get_struct_3dbdb():
    global _struct_3dbdb
    if _struct_3dbdb is None:
        _struct_3dbdb = struct.Struct("<3dbdb")
    return _struct_3dbdb
_struct_40d = None
def _get_struct_40d():
    global _struct_40d
    if _struct_40d is None:
        _struct_40d = struct.Struct("<40d")
    return _struct_40d
