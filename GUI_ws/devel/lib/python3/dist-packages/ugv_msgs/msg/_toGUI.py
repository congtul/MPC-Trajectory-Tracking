# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from ugv_msgs/toGUI.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class toGUI(genpy.Message):
  _md5sum = "4a28929b5edb2cd02f7ac9cd5152eccc"
  _type = "ugv_msgs/toGUI"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """#GPS Data 
float64 lat_postion
float64 lng_postion
float32 x
float32 y
float32 set_speed
float32 speed_left
float32 speed_right

#IMU Data 
#float32 roll
#float32 pitch
float32 yaw

#Controll Data
float32 set_steering
float32 steering
int8 num_mpc_refpath
float32[20] x_mpc_repath
float32[20] y_mpc_repath
float32[20] yaw_mpc_repath"""
  __slots__ = ['lat_postion','lng_postion','x','y','set_speed','speed_left','speed_right','yaw','set_steering','steering','num_mpc_refpath','x_mpc_repath','y_mpc_repath','yaw_mpc_repath']
  _slot_types = ['float64','float64','float32','float32','float32','float32','float32','float32','float32','float32','int8','float32[20]','float32[20]','float32[20]']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       lat_postion,lng_postion,x,y,set_speed,speed_left,speed_right,yaw,set_steering,steering,num_mpc_refpath,x_mpc_repath,y_mpc_repath,yaw_mpc_repath

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(toGUI, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.lat_postion is None:
        self.lat_postion = 0.
      if self.lng_postion is None:
        self.lng_postion = 0.
      if self.x is None:
        self.x = 0.
      if self.y is None:
        self.y = 0.
      if self.set_speed is None:
        self.set_speed = 0.
      if self.speed_left is None:
        self.speed_left = 0.
      if self.speed_right is None:
        self.speed_right = 0.
      if self.yaw is None:
        self.yaw = 0.
      if self.set_steering is None:
        self.set_steering = 0.
      if self.steering is None:
        self.steering = 0.
      if self.num_mpc_refpath is None:
        self.num_mpc_refpath = 0
      if self.x_mpc_repath is None:
        self.x_mpc_repath = [0.] * 20
      if self.y_mpc_repath is None:
        self.y_mpc_repath = [0.] * 20
      if self.yaw_mpc_repath is None:
        self.yaw_mpc_repath = [0.] * 20
    else:
      self.lat_postion = 0.
      self.lng_postion = 0.
      self.x = 0.
      self.y = 0.
      self.set_speed = 0.
      self.speed_left = 0.
      self.speed_right = 0.
      self.yaw = 0.
      self.set_steering = 0.
      self.steering = 0.
      self.num_mpc_refpath = 0
      self.x_mpc_repath = [0.] * 20
      self.y_mpc_repath = [0.] * 20
      self.yaw_mpc_repath = [0.] * 20

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_2d8fb().pack(_x.lat_postion, _x.lng_postion, _x.x, _x.y, _x.set_speed, _x.speed_left, _x.speed_right, _x.yaw, _x.set_steering, _x.steering, _x.num_mpc_refpath))
      buff.write(_get_struct_20f().pack(*self.x_mpc_repath))
      buff.write(_get_struct_20f().pack(*self.y_mpc_repath))
      buff.write(_get_struct_20f().pack(*self.yaw_mpc_repath))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      _x = self
      start = end
      end += 49
      (_x.lat_postion, _x.lng_postion, _x.x, _x.y, _x.set_speed, _x.speed_left, _x.speed_right, _x.yaw, _x.set_steering, _x.steering, _x.num_mpc_refpath,) = _get_struct_2d8fb().unpack(str[start:end])
      start = end
      end += 80
      self.x_mpc_repath = _get_struct_20f().unpack(str[start:end])
      start = end
      end += 80
      self.y_mpc_repath = _get_struct_20f().unpack(str[start:end])
      start = end
      end += 80
      self.yaw_mpc_repath = _get_struct_20f().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_2d8fb().pack(_x.lat_postion, _x.lng_postion, _x.x, _x.y, _x.set_speed, _x.speed_left, _x.speed_right, _x.yaw, _x.set_steering, _x.steering, _x.num_mpc_refpath))
      buff.write(self.x_mpc_repath.tostring())
      buff.write(self.y_mpc_repath.tostring())
      buff.write(self.yaw_mpc_repath.tostring())
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      _x = self
      start = end
      end += 49
      (_x.lat_postion, _x.lng_postion, _x.x, _x.y, _x.set_speed, _x.speed_left, _x.speed_right, _x.yaw, _x.set_steering, _x.steering, _x.num_mpc_refpath,) = _get_struct_2d8fb().unpack(str[start:end])
      start = end
      end += 80
      self.x_mpc_repath = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=20)
      start = end
      end += 80
      self.y_mpc_repath = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=20)
      start = end
      end += 80
      self.yaw_mpc_repath = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=20)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_20f = None
def _get_struct_20f():
    global _struct_20f
    if _struct_20f is None:
        _struct_20f = struct.Struct("<20f")
    return _struct_20f
_struct_2d8fb = None
def _get_struct_2d8fb():
    global _struct_2d8fb
    if _struct_2d8fb is None:
        _struct_2d8fb = struct.Struct("<2d8fb")
    return _struct_2d8fb
